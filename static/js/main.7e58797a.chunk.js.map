{"version":3,"sources":["CommentInput.js","Comment.js","CommentList.js","CommentApp.js","index.js"],"names":["CommentInput","state","username","content","componentWillMount","_loadUsername","localStorage","getItem","setState","componentDidMount","intputnode","focus","handleUsernameChange","event","target","value","handleConentChange","handleSubmit","props","onSubmit","createdTime","Date","handleOnBlur","_saveUsername","setItem","className","this","onChange","ref","c","onBlur","onClick","Component","Comment","timeString","_updateTimeString","comment","duration","Math","round","max","handleDelete","delete","index","_timer","setInterval","clearInterval","CommentList","comments","map","CommentApp","_loadComments","JSON","parse","_saveComments","stringify","handleSubmitComment","alert","push","splice","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7e58797a.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nclass CommentInput extends Component {\r\n  state = {\r\n    username: '',\r\n    content: ''\r\n  }\r\n  componentWillMount = ()=> {\r\n    this._loadUsername()\r\n  }\r\n\r\n  _loadUsername = () => {\r\n    const username = localStorage.getItem('username')\r\n    if (username) {\r\n      this.setState({ username })\r\n    }\r\n  }\r\n  componentDidMount = () => {\r\n    this.intputnode.focus()\r\n  }\r\n  handleUsernameChange =(event) => {\r\n    this.setState({username: event.target.value})\r\n  }\r\n  handleConentChange = (event)=>{\r\n    this.setState({content: event.target.value})\r\n  }\r\n  handleSubmit =()=>{\r\n    const { username, content } = this.state\r\n    this.props.onSubmit({username, content,createdTime: +new Date()})\r\n    this.setState({ content: '' }) \r\n  }\r\n  handleOnBlur = (event) =>{\r\n    this._saveUsername(event.target.value)\r\n  }\r\n  _saveUsername =(username)=> {\r\n    localStorage.setItem('username', username)\r\n  }\r\n  render() {\r\n    return (\r\n      <div className='comment-input'>\r\n        <div className='comment-field'>\r\n          <span className='comment-field-name'>用戶名：</span>\r\n          <div className='comment-field-input'>\r\n            <input value={this.state.username}\r\n                   onChange={this.handleUsernameChange}\r\n                   ref={c=>{this.intputnode=c}}\r\n                   onBlur={this.handleOnBlur}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className='comment-field'>\r\n          <span className='comment-field-name'>評論內容：</span>\r\n          <div className='comment-field-input'>\r\n            <textarea value={this.state.content} onChange={this.handleConentChange}/>\r\n          </div>\r\n        </div>\r\n        <div className='comment-field-button'>\r\n          <button onClick={this.handleSubmit}>\r\n            發布\r\n          </button>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default CommentInput","import React, { Component } from 'react'\r\n\r\nclass Comment extends Component {\r\n  state={\r\n    timeString :''\r\n  }\r\n  componentWillMount () {\r\n    this._updateTimeString()\r\n    this._timer = setInterval(this._updateTimeString,5000)\r\n  }\r\n  _updateTimeString = ()=>{\r\n    const {createdTime} = this.props.comment\r\n    let duration = (+new Date()-createdTime)/1000\r\n    this.setState({\r\n      timeString:duration>60? `${Math.round(duration / 60)} 分鐘前`\r\n      : `${Math.round(Math.max(duration, 1))} 秒前`\r\n    })\r\n  }\r\n  handleDelete = ()=>{\r\n    this.props.delete(this.props.index)\r\n  }\r\n  componentWillUnmount () {\r\n    clearInterval(this._timer)\r\n  }\r\n  render () {\r\n    const {username,content} = this.props.comment\r\n    return (\r\n      <div className='comment'>\r\n        <div className='comment-user'>\r\n          <span>{username} </span>：\r\n        </div>\r\n        <p>{content}</p>\r\n        <span className='comment-createdtime'>\r\n          {this.state.timeString}\r\n        </span>\r\n        <span className='comment-delete' onClick={this.handleDelete}>\r\n          删除\r\n        </span>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Comment","import React, { Component } from 'react'\r\nimport Comment from './Comment'\r\nclass CommentList extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n         {\r\n           this.props.comments.map((comment,index)=>{\r\n             return (\r\n                 <Comment comment={comment} key={index} delete={this.props.delete} />\r\n             )\r\n           })\r\n         }\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default CommentList","import React, { Component } from 'react'\r\nimport CommentInput from './CommentInput'\r\nimport CommentList from './CommentList'\r\n\r\nclass CommentApp extends Component {\r\n  state = {\r\n     comments :[]\r\n  }\r\n  componentWillMount =()=> {\r\n    this._loadComments()\r\n  }\r\n  _loadComments = () =>{\r\n    let comments = localStorage.getItem('comments')\r\n    if (comments) {\r\n      comments = JSON.parse(comments)\r\n      this.setState({ comments })\r\n    }\r\n  }\r\n  _saveComments = (comments)=>{\r\n    localStorage.setItem('comments',JSON.stringify(comments))\r\n  }\r\n  handleSubmitComment = (comment) =>{\r\n    if (!comment) return\r\n    if (!comment.username) return alert('請輸入用戶名')\r\n    if (!comment.content) return alert('請輸入內容')\r\n    this.state.comments.push(comment)\r\n    this.setState({comments:this.state.comments})\r\n    // console.log(comment)\r\n    this._saveComments(this.state.comments)\r\n  }\r\n  delete =(index)=>{\r\n     const {comments} = this.state\r\n     comments.splice(index, 1)\r\n     this.setState({ comments })\r\n     this._saveComments(comments)\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <CommentInput onSubmit={this.handleSubmitComment}/>\r\n        <CommentList  comments={this.state.comments} delete={this.delete}/>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default CommentApp","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport CommentApp from './CommentApp';\nReactDOM.render(\n  <div className='wrapper'>\n    <CommentApp/>\n  </div>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}